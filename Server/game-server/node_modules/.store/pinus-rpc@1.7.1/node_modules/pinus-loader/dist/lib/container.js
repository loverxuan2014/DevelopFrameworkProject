"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeFromContainer = exports.getFromContainer = exports.isUseContainer = exports.useContainer = exports.defaultContainer = void 0;
/**
 * Container to be used by this library for inversion control. If container was not implicitly set then by default
 * container simply creates a new instance of the given class.
 */
exports.defaultContainer = new (class {
    constructor() {
        this.instances = [];
    }
    get(someClass) {
        let instance = this.instances.find(instance => instance.type === someClass);
        if (!instance) {
            instance = { type: someClass, object: new someClass() };
            this.instances.push(instance);
        }
        return instance.object;
    }
    unbind(someClass) {
        let idx = this.instances.findIndex(instance => instance.type === someClass);
        if (idx >= 0) {
            this.instances.splice(idx, 1);
        }
    }
})();
let userContainer;
let userContainerOptions;
/**
 * Sets container to be used by this library.
 */
function useContainer(iocContainer, options) {
    userContainer = iocContainer;
    userContainerOptions = options;
}
exports.useContainer = useContainer;
function isUseContainer() {
    return userContainer !== undefined;
}
exports.isUseContainer = isUseContainer;
/**
 * Gets the IOC container used by this library.
 */
function getFromContainer(someClass) {
    if (userContainer) {
        try {
            const instance = userContainer.get(someClass);
            if (instance)
                return instance;
            if (!userContainerOptions || !userContainerOptions.fallback)
                return instance;
        }
        catch (error) {
            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
                throw error;
        }
    }
    return exports.defaultContainer.get(someClass);
}
exports.getFromContainer = getFromContainer;
/**
 * Remove object from the IOC container used by this library.
 */
function removeFromContainer(someClass) {
    if (userContainer) {
        try {
            userContainer.unbind(someClass);
        }
        catch (error) {
            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)
                throw error;
        }
    }
    exports.defaultContainer.unbind(someClass);
}
exports.removeFromContainer = removeFromContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2NvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFtQkE7OztHQUdHO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBaUYsSUFBSSxDQUFDO0lBQUE7UUFDdkcsY0FBUyxHQUFzQyxFQUFFLENBQUM7SUFpQjlELENBQUM7SUFmRyxHQUFHLENBQUksU0FBc0M7UUFDekMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDWCxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLFNBQVMsRUFBRSxFQUFFLENBQUM7WUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDakM7UUFFRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDM0IsQ0FBQztJQUNELE1BQU0sQ0FBSSxTQUF1QjtRQUM3QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUM7UUFDNUUsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztDQUNKLENBQUMsRUFBRSxDQUFDO0FBRUwsSUFBSSxhQUEyRixDQUFDO0FBQ2hHLElBQUksb0JBQW1ELENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxTQUFnQixZQUFZLENBQUMsWUFBMEYsRUFBRSxPQUE2QjtJQUNsSixhQUFhLEdBQUcsWUFBWSxDQUFDO0lBQzdCLG9CQUFvQixHQUFHLE9BQU8sQ0FBQztBQUNuQyxDQUFDO0FBSEQsb0NBR0M7QUFFRCxTQUFnQixjQUFjO0lBQzFCLE9BQU8sYUFBYSxLQUFLLFNBQVMsQ0FBQztBQUN2QyxDQUFDO0FBRkQsd0NBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLGdCQUFnQixDQUFJLFNBQXFCO0lBQ3JELElBQUksYUFBYSxFQUFFO1FBQ2YsSUFBSTtZQUNBLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDOUMsSUFBSSxRQUFRO2dCQUNSLE9BQU8sUUFBUSxDQUFDO1lBRXBCLElBQUksQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVE7Z0JBQ3ZELE9BQU8sUUFBUSxDQUFDO1NBRXZCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixJQUFJLENBQUMsb0JBQW9CLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxnQkFBZ0I7Z0JBQy9ELE1BQU0sS0FBSyxDQUFDO1NBQ25CO0tBQ0o7SUFDRCxPQUFPLHdCQUFnQixDQUFDLEdBQUcsQ0FBSSxTQUFTLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBaEJELDRDQWdCQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsbUJBQW1CLENBQUksU0FBcUI7SUFDeEQsSUFBSSxhQUFhLEVBQUU7UUFDZixJQUFJO1lBQ0EsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNuQztRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLG9CQUFvQixJQUFJLENBQUMsb0JBQW9CLENBQUMsZ0JBQWdCO2dCQUMvRCxNQUFNLEtBQUssQ0FBQztTQUNuQjtLQUNKO0lBQ0Qsd0JBQWdCLENBQUMsTUFBTSxDQUFJLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFWRCxrREFVQyJ9