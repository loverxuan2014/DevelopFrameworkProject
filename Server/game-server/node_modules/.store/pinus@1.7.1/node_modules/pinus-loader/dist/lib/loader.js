"use strict";
/**
 * Loader Module
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkFileType = exports.loadPath = exports.loadFile = exports.load = void 0;
const fs = require("fs");
const path = require("path");
const container_1 = require("./container");
const decoraters_1 = require("./decoraters");
/**
 * Load modules under the path.
 * If the module is a function, loader would treat it as a factory function
 * and invoke it with the context parameter to get a instance of the module.
 * Else loader would just require the module.
 * Module instance can specify a name property and it would use file name as
 * the default name if there is no name property. All loaded modules under the
 * path would be add to an empty root object with the name as the key.
 *
 * @param   {String} mpath    the path of modules. Load all the files under the
 *                           path, but *not* recursively if the path contain
 *                           any sub-directory.
 * @param  {Object} context  the context parameter that would be pass to the
 *                           module factory function.
 * @return {Object}          module that has loaded.
 */
function load(mpath, context, reload, createInstance, pathType) {
    if (!mpath) {
        throw new Error('opts or opts.path should not be empty.');
    }
    // maybe relative path, need convert to full path
    if (!isDir(mpath)) {
        mpath = process.cwd() + mpath;
    }
    try {
        mpath = fs.realpathSync(mpath);
    }
    catch (err) {
        throw err;
    }
    if (!isDir(mpath)) {
        throw new Error('path should be directory.');
    }
    return loadPath(mpath, context, reload, createInstance, pathType);
}
exports.load = load;
function loadFile(fp, reload) {
    let m = reload ? requireUncached(fp) : require(fp);
    return m;
}
exports.loadFile = loadFile;
function loadPath(path, context, reload, createInstance, pathType) {
    let files = fs.readdirSync(path);
    if (files.length === 0) {
        console.warn('path is empty, path:' + path);
        return;
    }
    if (path.charAt(path.length - 1) !== '/') {
        path += '/';
    }
    let fp, fn, m, res = {};
    for (let i = 0, l = files.length; i < l; i++) {
        fn = files[i];
        fp = path + fn;
        if (!isFile(fp)) {
            // only load  file
            continue;
        }
        if (!checkFileType(fn, '.js') && !checkFileType(fn, '.ts')) {
            // only load js/ts file type
            continue;
        }
        m = loadFile(fp, reload);
        if (!m) {
            continue;
        }
        // 兼容旧的写法
        if (typeof m.default === 'function') {
            let instance = m.default(context);
            let name = instance.name || getFileName(fn, '.js'.length);
            res[name] = instance;
        }
        for (let key in m) {
            let cls = m[key];
            if ((0, decoraters_1.isDefined)(cls, pathType)) {
                if (createInstance) {
                    res[cls.name] = (0, container_1.getFromContainer)(cls);
                }
                else {
                    res[cls.name] = cls;
                }
            }
        }
    }
    return res;
}
exports.loadPath = loadPath;
/**
 * Check file suffix

 * @param fn {String} file name
 * @param suffix {String} suffix string, such as .js, etc.
 */
function checkFileType(fn, suffix) {
    if (suffix.charAt(0) !== '.') {
        suffix = '.' + suffix;
    }
    if (fn.length <= suffix.length) {
        return false;
    }
    let str = fn.substring(fn.length - suffix.length).toLowerCase();
    suffix = suffix.toLowerCase();
    return str === suffix;
}
exports.checkFileType = checkFileType;
let isFile = function (path) {
    return fs.existsSync(path) && fs.statSync(path).isFile();
};
let isDir = function (path) {
    return fs.existsSync(path) && fs.statSync(path).isDirectory();
};
let getFileName = function (fp, suffixLength) {
    let fn = path.basename(fp);
    if (fn.length > suffixLength) {
        return fn.substring(0, fn.length - suffixLength);
    }
    return fn;
};
const clearRequireCache = function (path) {
    const moduleObj = require.cache[path];
    if (!moduleObj) {
        return;
    }
    if (moduleObj.parent) {
        //    console.log('has parent ',moduleObj.parent);
        moduleObj.parent.children.splice(moduleObj.parent.children.indexOf(moduleObj), 1);
    }
    delete require.cache[path];
};
let requireUncached = function (module) {
    if ((0, container_1.isUseContainer)()) {
        let m = require.cache[require.resolve(module)];
        if (m) {
            if (typeof m.exports['default'] === 'function') {
                (0, container_1.removeFromContainer)(m.exports['default']);
            }
        }
    }
    clearRequireCache(require.resolve(module));
    return require(module);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsMkNBQWtGO0FBQ2xGLDZDQUF1RDtBQUV2RDs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCxTQUFnQixJQUFJLENBQUMsS0FBYSxFQUFFLE9BQVksRUFBRSxNQUFlLEVBQUUsY0FBdUIsRUFBRSxRQUF3QjtJQUNoSCxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsaURBQWlEO0lBQ2pELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDZixLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztLQUNqQztJQUVELElBQUk7UUFDQSxLQUFLLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsTUFBTSxHQUFHLENBQUM7S0FDYjtJQUVELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDZixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDaEQ7SUFFRCxPQUFPLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQXJCRCxvQkFxQkM7QUFFRCxTQUFnQixRQUFRLENBQUMsRUFBVSxFQUFFLE1BQWU7SUFDaEQsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuRCxPQUFPLENBQUMsQ0FB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