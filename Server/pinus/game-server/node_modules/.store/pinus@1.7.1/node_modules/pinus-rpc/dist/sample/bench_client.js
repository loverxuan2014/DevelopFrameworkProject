"use strict";
// import * as bluebird from "bluebird"
Object.defineProperty(exports, "__esModule", { value: true });
const preload_1 = require("./preload");
(0, preload_1.preload)();
// // 使用bluebird输出完整的promise调用链
// global.Promise = bluebird.Promise;
// // 开启长堆栈
// bluebird.config({
//     // Enable warnings
//     warnings: false,
//     // Enable long stack traces
//     longStackTraces: false,
//     // Enable cancellation
//     cancellation: false,
//     // Enable monitoring
//     monitoring: false
// });
const index_1 = require("../index");
const pinus_logger_1 = require("pinus-logger");
(0, pinus_logger_1.configure)('./config/log4js.json');
// remote service interface path info list
let records = [{
        namespace: 'user',
        serverType: 'test',
        path: __dirname + '/remote/test'
    }];
let context = {
    serverId: 'test-server-1'
};
// server info list
let servers = [{
        id: 'test-server-1',
        serverType: 'test',
        host: '127.0.0.1',
        port: 3333
    }];
// route parameter passed to route function
let routeParam = null;
// route context passed to route function
let routeContext = servers;
// route function to caculate the remote server id
let routeFunc = function (session, msg, context, cb) {
    cb(null, context[0].id);
};
let client = new index_1.RpcClient({
    routeContext: servers,
    router: routeFunc,
    context: context,
    pendingSize: 10000000000
});
let start = null;
client.start(async function (err) {
    console.log('rpc client start ok.');
    client.addProxies(records);
    client.addServers(servers);
    start = Date.now();
    // runSerial();
    // runParallels();
    runOnlySends();
});
let num_requests = 100000;
let times = 0;
let mock_data_1 = 'hello';
let mock_data_2 = 'hello';
let num_repeat = 200; // 100 200 300 400 800
for (let i = 0; i < num_repeat; i++) {
    mock_data_2 += mock_data_1;
}
let mock_data_3 = {
    a: 'run',
    b: mock_data_2 + Date.now() + '_',
    time: Date.now()
};
let payload = mock_data_3;
// console.log(new Buffer(payload).length / 1024 + 'k');
console.log(Buffer.from(JSON.stringify(payload)).length / 1024 + 'k');
async function runParallels() {
    let maxParallel = 1;
    while (true) {
        if (maxParallel > 10000) {
            maxParallel = 10000;
        }
        let now = Date.now();
        start = now;
        await runParallel(maxParallel);
        now = Date.now();
        let cost = now - start;
        console.log(`runParallel ${num_requests} num requests(maxParallel:${maxParallel}) cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        maxParallel = maxParallel * 2;
    }
}
async function runParallel(maxParallel) {
    let all = [];
    for (let times = 0; times < num_requests; times++) {
        all.push(rpcRequest(payload));
        if (all.length === maxParallel) {
            await Promise.all(all);
            all.length = 0;
        }
    }
    await Promise.all(all);
}
async function runSerial() {
    if (times > num_requests) {
        return;
    }
    if (times === num_requests) {
        let now = Date.now();
        let cost = now - start;
        console.log(`runSerial ${num_requests} num requests cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        times = 0;
        start = now;
        // return;
        await runSerial();
        return;
    }
    times++;
    await rpcRequest(payload);
    runSerial();
}
async function rpcRequest(param) {
    let result = await client.proxies.user.test.service.echo(routeParam, mock_data_1, 123);
    // console.log(count++);
}
async function runOnlySends() {
    let maxParallel = 1;
    while (true) {
        if (maxParallel > 10000) {
            maxParallel = 10000;
        }
        let now = Date.now();
        start = now;
        runOnlySend(maxParallel);
        now = Date.now();
        let cost = now - start;
        console.log(`runOnlySend ${num_requests} num requests(maxParallel:${maxParallel}) cost ${cost}ms , ${(num_requests / (cost / 1000)).toFixed(2)}ops/sec`);
        maxParallel = maxParallel * 2;
    }
}
function runOnlySend(maxParallel) {
    for (let times = 0; times < num_requests; times++) {
        rpcRequest(payload);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2hfY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc2FtcGxlL2JlbmNoX2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsdUNBQXVDOztBQUV2Qyx1Q0FBa0M7QUFDbEMsSUFBQSxpQkFBTyxHQUFFLENBQUM7QUFHViwrQkFBK0I7QUFDL0IscUNBQXFDO0FBQ3JDLFdBQVc7QUFDWCxvQkFBb0I7QUFDcEIseUJBQXlCO0FBQ3pCLHVCQUF1QjtBQUN2QixrQ0FBa0M7QUFDbEMsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiwyQkFBMkI7QUFDM0IsMkJBQTJCO0FBQzNCLHdCQUF3QjtBQUN4QixNQUFNO0FBR04sb0NBQXlFO0FBQ3pFLCtDQUF5QztBQUN6QyxJQUFBLHdCQUFTLEVBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUVsQywwQ0FBMEM7QUFDMUMsSUFBSSxPQUFPLEdBQUcsQ0FBQztRQUNiLFNBQVMsRUFBRSxNQUFNO1FBQ2pCLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLElBQUksRUFBRSxTQUFTLEdBQUcsY0FBYztLQUNqQyxDQUFDLENBQUM7QUFFSCxJQUFJLE9BQU8sR0FBRztJQUNaLFFBQVEsRUFBRSxlQUFlO0NBQzFCLENBQUM7QUFFRixtQkFBbUI7QUFDbkIsSUFBSSxPQUFPLEdBQ1QsQ0FBQztRQUNDLEVBQUUsRUFBRSxlQUFlO1FBQ25CLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLElBQUksRUFBRSxXQUFXO1FBQ2pCLElBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQyxDQUFDO0FBQ0wsMkNBQTJDO0FBQzNDLElBQUksVUFBVSxHQUFXLElBQUksQ0FBQztBQUU5Qix5Q0FBeUM7QUFDekMsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDO0FBRzNCLGtEQUFrRDtBQUNsRCxJQUFJLFNBQVMsR0FBRyxVQUFVLE9BQStCLEVBQUUsR0FBVyxFQUFFLE9BQXFCLEVBQUUsRUFBMkM7SUFDeEksRUFBRSxDQUFDLElBQUks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