"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pinus_protocol_1 = require("pinus-protocol");
const pinus_logger_1 = require("pinus-logger");
const path = require("path");
let logger = (0, pinus_logger_1.getLogger)('pinus', path.basename(__filename));
let handlers = {};
let ST_INITED = 0;
let ST_WAIT_ACK = 1;
let ST_WORKING = 2;
let ST_CLOSED = 3;
let handleHandshake = function (socket, pkg) {
    if (socket.state !== ST_INITED) {
        return;
    }
    try {
        socket.emit('handshake', JSON.parse(pinus_protocol_1.Protocol.strdecode(pkg.body)));
    }
    catch (ex) {
        socket.emit('handshake', {});
    }
};
let handleHandshakeAck = function (socket, pkg) {
    if (socket.state !== ST_WAIT_ACK) {
        return;
    }
    socket.state = ST_WORKING;
    socket.emit('heartbeat');
};
let handleHeartbeat = function (socket, pkg) {
    if (socket.state !== ST_WORKING) {
        return;
    }
    socket.emit('heartbeat');
};
let handleData = function (socket, pkg) {
    if (socket.state !== ST_WORKING) {
        return;
    }
    socket.emit('message', pkg);
};
handlers[pinus_protocol_1.Package.TYPE_HANDSHAKE] = handleHandshake;
handlers[pinus_protocol_1.Package.TYPE_HANDSHAKE_ACK] = handleHandshakeAck;
handlers[pinus_protocol_1.Package.TYPE_HEARTBEAT] = handleHeartbeat;
handlers[pinus_protocol_1.Package.TYPE_DATA] = handleData;
function default_1(socket, pkg) {
    let handler = handlers[pkg.type];
    if (!!handler) {
        handler(socket, pkg);
    }
    else {
        logger.error('could not find handle invalid data package.');
        socket.disconnect();
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9jb25uZWN0b3JzL2NvbW1vbi9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQW9EO0FBQ3BELCtDQUF5QztBQUV6Qyw2QkFBNkI7QUFDN0IsSUFBSSxNQUFNLEdBQUcsSUFBQSx3QkFBUyxFQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFHM0QsSUFBSSxRQUFRLEdBQWtFLEVBQUUsQ0FBQztBQUVqRixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDbEIsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNuQixJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFFbEIsSUFBSSxlQUFlLEdBQUcsVUFBVSxNQUFlLEVBQUcsR0FBUTtJQUN0RCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQzVCLE9BQU87S0FDVjtJQUNELElBQUk7UUFDQSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLHlCQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEU7SUFBQyxPQUFPLEVBQUUsRUFBRTtRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ2hDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsSUFBSSxrQkFBa0IsR0FBRyxVQUFVLE1BQWUsRUFBRyxHQUFRO0lBQ3pELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxXQUFXLEVBQUU7UUFDOUIsT0FBTztLQUNWO0lBQ0QsTUFBTSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7SUFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRixJQUFJLGVBQWUsR0FBRyxVQUFVLE1BQWUsRUFBRyxHQUFRO0lBQ3RELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7UUFDN0IsT0FBTztLQUNWO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRixJQUFJLFVBQVUsR0FBRyxVQUFVLE1BQWUsRUFBRyxHQUFRO0lBQ2pELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7UUFDN0IsT0FBTztLQUNWO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsUUFBUSxDQUFDLHdCQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsZUFBZSxDQUFDO0FBQ25ELFFBQVEsQ0FBQyx3QkFBTyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsa0JBQWtCLENBQUM7QUFDMUQsUUFBUSxDQUFDLHdCQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsZUFBZSxDQUFDO0FBQ25ELFFBQVEsQ0FBQyx3QkFBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUV6QyxtQkFBeUIsTUFBZSxFQUFFLEdBQVE7SUFDOUMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFDWCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3hCO1NBQU07UUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBQ3ZCO0FBQ0wsQ0FBQztBQVJELDRCQVFDIn0=